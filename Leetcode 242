// IsAnagram both will work time complexity will vary 

// class Solution {
//     public boolean isAnagram(String s, String t) {
//         s = s.toLowerCase();
//         t = t.toLowerCase();

//         s = s.replace(" ", "");
//         t = t.replace(" ", "");

//         if (s.length() != t.length()) {
//             return false; 
//         }

//         Map<Character , Integer> charCount = new HashMap<>();

//         for(char c : s.toCharArray()){
//             charCount.put(c,charCount.getOrDefault(c,0) + 1);
//         }

//         for(char c : t.toCharArray()){
//             if(!charCount.containsKey(c)){
//                 return false;
//             }
//             charCount.put(c,charCount.getOrDefault(c,0) - 1);
//             if(charCount.get(c) == 0){
//                 charCount.remove(c);
//             }
//         }

//         return charCount.isEmpty();
//     }
// }

class Solution {
    public boolean isAnagram(String s, String t) {

      int[] map = new int[26];

        for(char c: s.toCharArray()){
            map[c-'a']++;
        }

        for(char c: t.toCharArray()){
            map[c-'a']--;
        }

        for(int m: map){
            if(m != 0) return false;
        }

        return true;

        
    }
}
