class Solution {
    public TreeNode createBinaryTree(int[][] descriptions) {
       HashMap<Integer, TreeNode> nodeMap = new HashMap<>();
       Set<Integer> child = new HashSet<>();
       for(int[] des : descriptions){
        int parent = des[0];
        int childV = des[1];
       int ifLeft = des[2];
        TreeNode parentNode = nodeMap.getOrDefault(parent, new TreeNode(parent));
        nodeMap.put(parent, parentNode);

        TreeNode childNode = nodeMap.getOrDefault(childV, new TreeNode(childV));
        nodeMap.put(childV,childNode);

        if(ifLeft == 1){
            parentNode.left = childNode;
        }
        else{
            parentNode.right = childNode;
        }

        child.add(childV);
       }
       TreeNode root = null;
       for(int i : nodeMap.keySet()){
        if(!child.contains(i)){
            root = nodeMap.get(i);
            break;
        }
       }
       return root;
    }
}

/*

Example 1:
Input: descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]
Output: [50,20,80,15,17,19]
Explanation: The root node is the node with value 50 since it has no parent.
The resulting binary tree is shown in the diagram.


Example 2:
Input: descriptions = [[1,2,1],[2,3,0],[3,4,1]]
Output: [1,2,null,null,3,4]
Explanation: The root node is the node with value 1 since it has no parent.
The resulting binary tree is shown in the diagram.
*/
